{"ast":null,"code":"var _jsxFileName = \"/Users/emil/Desktop/React-JS Course/authenticating/frontend/src/pages/Authentication.jsx\";\nimport { json, redirect } from \"react-router-dom\";\nimport AuthForm from \"../components/AuthForm\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction AuthenticationPage() {\n  return /*#__PURE__*/_jsxDEV(AuthForm, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 5,\n    columnNumber: 10\n  }, this);\n}\n_c = AuthenticationPage;\nexport default AuthenticationPage;\nexport async function action(_ref) {\n  let {\n    request\n  } = _ref;\n  const searchParams = new URL(request.url).searchParams;\n  const mode = searchParams.get(\"mode\") || \"login\"; //if the mode is not set -> set to login\n\n  if (mode !== \"login\" && mode !== \"signup\") {\n    throw json({\n      message: \"Unsupported mode for auth\"\n    }, {\n      status: 422\n    });\n  }\n  const data = await request.formData();\n  const authData = {\n    email: data.get(\"email\"),\n    password: data.get(\"password\")\n  };\n  const response = await fetch(\"http://localhost:8080/\" + mode, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(authData)\n  });\n  if (response.status === 422 || response.status === 401) {\n    console.log('response 422 or 401');\n    return response;\n  }\n  if (!response.ok) {\n    console.log('response error not ok');\n    throw json({\n      message: \"Could not authenticate this user\"\n    }, {\n      status: 500\n    });\n  }\n  const resData = await response.json();\n  const token = resData.token;\n  console.log(token);\n  localStorage.setItem(\"token\", token);\n  console.log('generate token');\n  const expireDate = new Date(); // get the time now\n  expireDate.getHours(expireDate.getHours() + 1); // get the hour now and add 1 hour more to it\n  localStorage.setItem(\"expireDateToken\", expireDate.toISOString());\n  console.log('generate expiration date');\n  return redirect(\"/\");\n}\nvar _c;\n$RefreshReg$(_c, \"AuthenticationPage\");","map":{"version":3,"names":["json","redirect","AuthForm","jsxDEV","_jsxDEV","AuthenticationPage","fileName","_jsxFileName","lineNumber","columnNumber","_c","action","_ref","request","searchParams","URL","url","mode","get","message","status","data","formData","authData","email","password","response","fetch","method","headers","body","JSON","stringify","console","log","ok","resData","token","localStorage","setItem","expireDate","Date","getHours","toISOString","$RefreshReg$"],"sources":["/Users/emil/Desktop/React-JS Course/authenticating/frontend/src/pages/Authentication.jsx"],"sourcesContent":["import { json, redirect } from \"react-router-dom\";\nimport AuthForm from \"../components/AuthForm\";\n\nfunction AuthenticationPage() {\n  return <AuthForm />;\n}\n\nexport default AuthenticationPage;\n\nexport async function action({ request }) {\n  const searchParams = new URL(request.url).searchParams;\n  const mode = searchParams.get(\"mode\") || \"login\"; //if the mode is not set -> set to login\n\n  if (mode !== \"login\" && mode !== \"signup\") {\n    throw json({ message: \"Unsupported mode for auth\" }, { status: 422 });\n  }\n  const data = await request.formData();\n\n  const authData = {\n    email: data.get(\"email\"),\n    password: data.get(\"password\"),\n  };\n  const response = await fetch(\"http://localhost:8080/\" + mode, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify(authData),\n  });\n\n  if (response.status === 422 || response.status === 401) {\n    console.log('response 422 or 401');\n    return response;\n  }\n  if (!response.ok) {\n    console.log('response error not ok');\n    throw json(\n      { message: \"Could not authenticate this user\" },\n      { status: 500 }\n    );\n  }\n\n  const resData = await response.json();\n  const token = resData.token;\n  console.log(token);\n  localStorage.setItem(\"token\", token);\n  console.log('generate token');\n  \n  const expireDate = new Date(); // get the time now\n  expireDate.getHours(expireDate.getHours() + 1); // get the hour now and add 1 hour more to it\n  localStorage.setItem(\"expireDateToken\", expireDate.toISOString());\n  console.log('generate expiration date');\n\n  return redirect(\"/\");\n}\n"],"mappings":";AAAA,SAASA,IAAI,EAAEC,QAAQ,QAAQ,kBAAkB;AACjD,OAAOC,QAAQ,MAAM,wBAAwB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE9C,SAASC,kBAAkBA,CAAA,EAAG;EAC5B,oBAAOD,OAAA,CAACF,QAAQ;IAAAI,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QAAG;AACrB;AAACC,EAAA,GAFQL,kBAAkB;AAI3B,eAAeA,kBAAkB;AAEjC,OAAO,eAAeM,MAAMA,CAAAC,IAAA,EAAc;EAAA,IAAb;IAAEC;EAAQ,CAAC,GAAAD,IAAA;EACtC,MAAME,YAAY,GAAG,IAAIC,GAAG,CAACF,OAAO,CAACG,GAAG,CAAC,CAACF,YAAY;EACtD,MAAMG,IAAI,GAAGH,YAAY,CAACI,GAAG,CAAC,MAAM,CAAC,IAAI,OAAO,CAAC,CAAC;;EAElD,IAAID,IAAI,KAAK,OAAO,IAAIA,IAAI,KAAK,QAAQ,EAAE;IACzC,MAAMjB,IAAI,CAAC;MAAEmB,OAAO,EAAE;IAA4B,CAAC,EAAE;MAAEC,MAAM,EAAE;IAAI,CAAC,CAAC;EACvE;EACA,MAAMC,IAAI,GAAG,MAAMR,OAAO,CAACS,QAAQ,EAAE;EAErC,MAAMC,QAAQ,GAAG;IACfC,KAAK,EAAEH,IAAI,CAACH,GAAG,CAAC,OAAO,CAAC;IACxBO,QAAQ,EAAEJ,IAAI,CAACH,GAAG,CAAC,UAAU;EAC/B,CAAC;EACD,MAAMQ,QAAQ,GAAG,MAAMC,KAAK,CAAC,wBAAwB,GAAGV,IAAI,EAAE;IAC5DW,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MACP,cAAc,EAAE;IAClB,CAAC;IACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACT,QAAQ;EAC/B,CAAC,CAAC;EAEF,IAAIG,QAAQ,CAACN,MAAM,KAAK,GAAG,IAAIM,QAAQ,CAACN,MAAM,KAAK,GAAG,EAAE;IACtDa,OAAO,CAACC,GAAG,CAAC,qBAAqB,CAAC;IAClC,OAAOR,QAAQ;EACjB;EACA,IAAI,CAACA,QAAQ,CAACS,EAAE,EAAE;IAChBF,OAAO,CAACC,GAAG,CAAC,uBAAuB,CAAC;IACpC,MAAMlC,IAAI,CACR;MAAEmB,OAAO,EAAE;IAAmC,CAAC,EAC/C;MAAEC,MAAM,EAAE;IAAI,CAAC,CAChB;EACH;EAEA,MAAMgB,OAAO,GAAG,MAAMV,QAAQ,CAAC1B,IAAI,EAAE;EACrC,MAAMqC,KAAK,GAAGD,OAAO,CAACC,KAAK;EAC3BJ,OAAO,CAACC,GAAG,CAACG,KAAK,CAAC;EAClBC,YAAY,CAACC,OAAO,CAAC,OAAO,EAAEF,KAAK,CAAC;EACpCJ,OAAO,CAACC,GAAG,CAAC,gBAAgB,CAAC;EAE7B,MAAMM,UAAU,GAAG,IAAIC,IAAI,EAAE,CAAC,CAAC;EAC/BD,UAAU,CAACE,QAAQ,CAACF,UAAU,CAACE,QAAQ,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC;EAChDJ,YAAY,CAACC,OAAO,CAAC,iBAAiB,EAAEC,UAAU,CAACG,WAAW,EAAE,CAAC;EACjEV,OAAO,CAACC,GAAG,CAAC,0BAA0B,CAAC;EAEvC,OAAOjC,QAAQ,CAAC,GAAG,CAAC;AACtB;AAAC,IAAAS,EAAA;AAAAkC,YAAA,CAAAlC,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}